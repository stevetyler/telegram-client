
http://emberjs.com/guides/templates/input-helpers/
http://emberjs.com/guides/templates/links/
http://blog.sensible.io/2013/05/23/how-to-write-a-login-form.html

I found a couple of problems here first of all
you should not use variables from the exterior
so you cannot use the 'users' array in the controller
because the global users symbols can be modified by other functions in other parts of your program
if you want access to the users object from inside the MinorDetector object, you must get it through this.get('users')

always decalre your variables with var
so in your for loop
var i = ...

the dependency should be users.@each.birthdate instead of user.@each.birthdate


http://emberjs.com/api/classes/Ember.Controller.html#method_transitionToRoute

http://emberjs.com/guides/models/finding-records/#toc_finding-a-single-record

also I noticed you haven't changed the controller type
and deleted the content property
I thought it should be ObjectController?
does your route have a model?
oh
no it doesn't
is that the mystream route or login route?

the login controller, so it should be the login route..
so the login route has no model, then the controller should not be objectcontroller
ok, so it doesn't work because
Andrei â€¢ 12 mins
sorry so should the login route have a model then?
your application doesn't have an adapter configured
if you check your javascript console
it's trying to make a query to a remote server
so you haven't configured the fixtureadapter


questions 10/9 :


create separate view for posts and render within my-stream template to save duplication ? or use partial ? Use component

How to create reply and render publish within post?m Components

post template - handlebars not applying margin on p?


ssh ubuntu@192.168.56.10

Express server - set permission on dist folder



26/9/14

Next step is to work on the routes that create new users and new posts

app.post('/api/users', function(req, res) {

});

When ember is requesting  you to save a user on the server you'll be able to access the sent info via req.body.user. You're going to push this user to the array. Moreover, ember will want you to send it back as a response:

req.send({user: theNewUser})

In order to get access to any data sent to you by ember via req.body you'll need to install and enable the body-parser middleware.

https://github.com/expressjs/body-parser

Following the same principles you'll have to implement the route responsible for saving new posts published by your users.

app.post('/api/posts', function(req, res) {

});

Because the post object sent by ember doesn't have an id (only user, createdDate and body) - you'll have to create one and then push it to the posts array.



